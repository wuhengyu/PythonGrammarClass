'''
使用 yield 生成器:
每当调用一次迭代器的 next 函数，生成器函数便会运行到 yield 位置，返回 yield 后面的值，并且在这个地方暂停，
此时，所有的状态都会保持不变，直到下次调用 next 函数或者碰到异常循环时才退出。
当程序运行到 yield 这一行时就不会继续往下执行，而是返回一个包含当前函数中所有参数的状态的 iterator 对象。
目的就是在第二次被调用时，能够访问到的函数中所有的参数值都是第一次访问时的值，而不是重新赋值
第二次调用其实就是调用第一次返回的 iterator 对象的 next()方法
'''


def fib(max):  # 定义方法 fib()
    a, b = 1, 1  # 为变量 a 和 b 赋值
    while a < max:  # 如果 a 小于 max
        yield a  # 当程序运行到此处时就不会继续
        # 往下执行
        a, b = b, a + b


for n in fib(15):  # 遍历 15 以内的值
    print(n)
