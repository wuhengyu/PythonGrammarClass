# 自定义了一个递减数字序列的生成器，每次调用时都会生成一个从调用时所提供初始值不断递减的数字序列
# 生成对象不但可以直接被 for 循环语句遍历，而且可以进行手工遍历，在最后两行代码中便是使用的手工遍历方式
# 第一次使用 for 循环语句时直接遍历自己创建的生成器，第二次用手工方式获取生成器产生的数值序列。
def shengYield(n):  # 定义方法 shengYield()
    while n > 0:  # 如果 n 大于 0 则开始循环
        print("开始生成")
        yield n  # 定义一个生成器
        print("完成一次")
        n -= 1  # 生成初始值的不断递减的数字序列
        print("不断递减的数字序列:", n)


if __name__ == "__main__":  # 当直接运行模块时，
    # for 循环语句遍历
    for i in shengYield(4):  # 遍历 4 次
        print("遍历得到的值：", i)
    print()
    # 手工遍历方式
    # 在空行之后的「已经实例化生成器对象」的前面，已经实例化了生成器对象，但是生成器并没有运行,没有输出"开始生成"
    sheng_yield = shengYield(4)
    print("已经实例化生成器对象")
    print(sheng_yield.__next__())  # 直接遍历自己创建的生成器
    # 第二次调用方法__next__()后,yield 语句之后开始恢复运行生成器
    print("第二次调用__next__()方法：")
    print(sheng_yield.__next__())  # 以手工方式获取生成器产生的数值序列
    print("......")
